class Solution {
public:
    int solve(vector<int>& obstacles,int curlane ,int curpos,vector<vector<int>>&dp)
    {
        //base case
        int n =  obstacles.size();
        if(curpos==n-1)
        {
            return 0;
        }
        //we have to see if moving forward is posssible or not
        if(dp[curlane][curpos]!=-1)
        {
           return dp[curlane][curpos];
        }
        if(obstacles[curpos+1]!=curlane)
        {
            return solve(obstacles,curlane,curpos+1,dp);
        }
        else
        {
            int ans = INT_MAX;
            for(int i=1;i<=3;i++)
            {
               if(obstacles[curpos]!=i && curlane!=i)
               {
                   ans = min(ans,1+solve(obstacles,i,curpos,dp));
               }
               
            }
              dp[curlane][curpos]=ans;
              return dp[curlane][curpos];
        }
    }
    int minSideJumps(vector<int>& obstacles) 
    {
        vector<vector<int>> dp(4,vector<int>(obstacles.size(),-1));
        return solve(obstacles,2,0,dp);

    }

};
