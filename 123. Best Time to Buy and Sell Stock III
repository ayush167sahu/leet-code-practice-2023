class Solution {
public:

    int solve(int i,int buy,vector<int>& prices,int limit,vector<vector<vector<int>>>&dp)
    {
        if(i==prices.size())
        {
            return 0;
        }
        if(limit==0)
        {
            return 0;
        }
        if(dp[i][buy][limit]!=-1)
        {
            return dp[i][buy][limit];
        }
        int profit = 0;
        if(buy==1)
        {
            //buy karo
            int buy  = -prices[i]+solve(i+1,0,prices,limit,dp);
            //skip in buy
            int skip =  0+ solve(i+1,1,prices,limit,dp);
            profit = max(buy,skip);

        }
        else
        {
            //sell
            int sell = prices[i]+solve(i+1,1,prices,limit-1,dp);
            //skip in selll
            int skipsell = 0+solve(i+1,0,prices,limit,dp);

            profit = max(sell,skipsell);
 
        }
        return dp[i][buy][limit]=profit;
    }
    int maxProfit(vector<int>& prices) 
    {
        //as three parameters are changing we will use 3d dp
        int n = prices.size();
        vector<vector<vector<int>>> dp(n+1,vector<vector<int>>(2,vector<int>(3,-1)));
        return solve(0,1,prices,2,dp);
    }
};
