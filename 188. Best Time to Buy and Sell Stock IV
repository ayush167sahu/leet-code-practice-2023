int solve(int i,int buy,int k ,vector<int>& prices,vector<vector<vector<int>>>&dp)
    {
        if(i==prices.size())
        {
            return 0;
        }
        if(k==0)
        {
            return 0;
        }
        if(dp[i][buy][k]!=-1)
        {
            return dp[i][buy][k];
        }
        int profit = 0;
        if(buy==1)
        {
            //buy or skip
            int buykaro = -prices[i]+solve(i+1,0,k,prices,dp);
                          
            int skipkaro = 0+solve(i+1,1,k,prices,dp);
                           
            profit = max(buykaro,skipkaro);

        }
        else
        {
            //sell or skip
            int sellkaro = prices[i]+solve(i+1,1,k-1,prices,dp);
                             
            int skip     =  0+      +solve(i+1,0,k,prices,dp);
            profit = max(sellkaro,skip);

        }
        return dp[i][buy][k]=profit;
    }
    
    int maxProfit(int k, vector<int>& prices) 
    {
        int n = prices.size();
        vector<vector<vector<int>>> dp(n+1,vector<vector<int>>(3,vector<int>(k+1,-1)));
        return solve(0,1,k,prices,dp);
       // return solve(0,1,prices,k);
    }
