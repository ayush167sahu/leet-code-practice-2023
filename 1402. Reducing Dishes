class Solution {
public:
    int solve(vector<int>& sat,int time,int index,vector<vector<int>>&dp)
    {
        int n = sat.size();
        if(index==n)
    
        {
            return 0;
        }
        if(dp[time][index]!=-1)
        {
            return dp[time][index];
        }
        //then we have to folloe the logic of 0-1 knapsack
        int inc = (time*sat[index])+solve(sat,time+1,index+1,dp);

        int exl =  + solve(sat,time,index+1,dp);

        dp[time][index] =max(inc,exl);
       return dp[time][index];
       
    }
    int maxSatisfaction(vector<int>& satisfaction) 
    {
        int n = satisfaction.size();
        vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
        sort(satisfaction.begin(),satisfaction.end());

        return solve(satisfaction,1,0,dp);
    }
};
