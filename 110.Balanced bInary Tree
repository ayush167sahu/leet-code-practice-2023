leetcode qstn no 110 balanced binary tree
//the following approach take o(n2) 
class Solution {
public:
    int height(TreeNode* root) 
    {
        if(root==NULL)
         return 0;

        int left =height(root->left);
        int right =height(root->right);

        int ans= max(left,right)+1;

        return ans;
        
    }
    bool isBalanced(TreeNode* root) 
    {
        if(root==NULL)
         return true;

        int left = isBalanced(root->left);
        int right = isBalanced(root->right);

        bool diff = abs(height(root->right)-height(root->left))<=1;

        if(left && right && diff )
          return true;
        else
        return false;
        
    }
};
//to avoid the o(n2)approach we use pair which passed both the true ans height TC reduced to 0(n)
  pair<bool,int> isBalancedFast(TreeNode*root)
    {
        if(root==NULL)
        {
            pair<bool,int> p = make_pair(true,0);
            return p;
        }
        pair<bool,int> left = isBalancedFast(root->left);
        pair<bool,int> right = isBalancedFast(root->right);

        bool leftAns = left.first;
        bool rightAns = right.first;
        bool diff = abs(left.second-right.second)<=1;

        pair<bool,int> ans;
        ans.second = max(left.second,right.second)+1;

        if(leftAns && rightAns && diff)
        {
            ans.first = true;
        }
        else
        ans.first = false;

        return ans;
    }
    bool isBalanced(TreeNode* root) 
    {
       return isBalancedFast(root).first;
    }
};
