leetcode qntn no 39 combination sum
class Solution {
public:
    void solve(int index,vector<int>&arr,vector<vector<int>> &ans,vector<int> &temp,int target)
    {
        //base case
        if(index == arr.size())
        {
            if(target==0)
            {
                ans.push_back(temp);
            }
            return;
        }
        if(arr[index]<=target)
        {
           temp.push_back(arr[index]);
           solve(index,arr,ans,temp,target-arr[index]);
           //backtrack
           temp.pop_back();    
        }
        solve(index+1,arr,ans,temp,target);
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) 
    {
        //approach
        //we will use backtracking
        //we will either pick or notpick the element if we oich the lement the we will see the case when the 
        //then we will see the case if the index reaches the array.size() if it reaches thn the target should be 0
        vector<vector<int>> ans;
        vector<int> temp;
        solve(0,candidates,ans,temp,target);
        return ans;
    }
};
