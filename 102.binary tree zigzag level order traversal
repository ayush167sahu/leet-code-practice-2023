103.zigzag level order traversal
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) 
    {
        queue<TreeNode*> q;
        vector<vector<int>> v1;
        //when the root is null return empty array
        if(root==NULL)
        {
            return v1;
        }
        q.push(root);
        //we will maintain a bool variable to chanbe the levels
        bool leftToright = true;
        while(!q.empty())
        {
            int size = q.size();
            //we have to assign the vector size to access the indices
            vector<int> v(size);

            for(int i=0;i<size;i++)
            {
                TreeNode* temp = q.front();
                q.pop();
                // we have to check if the lefToright is true or false to change the side
                int index = leftToright ? i : size-i-1;
                v[index] = temp->val;

                if(temp->left!=NULL)
                 q.push(temp->left);

                if(temp->right!=NULL)
                 q.push(temp->right);

            }

            leftToright = !leftToright;
            v1.push_back(v);

     
    
        }
               return v1; 
    }
};
