class Solution {
public:
     TreeNode* solve(vector<int>&postorder,vector<int> &inorder,int &index,int inorderStart,int inorderEnd,unordered_map<int,int>&mp,int n)
    { 
        if((index <0) || (inorderStart>inorderEnd))
        {
            return NULL;
        }
        //to get the root element from the preorder
        int element = postorder[index--];
        TreeNode *temp = new TreeNode(element);
        //getting the position from inorder
        int position = mp[element];
        //as the root element is in the right part we should call right part first
       temp->right = solve(postorder,inorder,index,position+1,inorderEnd,mp,n);
       temp->left = solve(postorder,inorder,index,inorderStart,position-1,mp,n);


       return temp;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) 
    {
         int index = postorder.size()-1;
        unordered_map<int,int> mp;
        for(int i=0;i<inorder.size();i++)
        {
            mp[inorder[i]]=i;
        }
        TreeNode * root = solve(postorder ,inorder,index, 0 ,inorder.size()-1,mp,postorder.size()-1);
        return root;
        
    }
};
